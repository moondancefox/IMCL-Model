digraph G
{
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 1: TRIGGER(pathSensor==TRUE)"
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 7: TRIGGER(sensor1==TRUE)"
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 11: TRIGGER(sensor2==TRUE)"
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 15: TRIGGER(sortSensor==TRUE)"
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 24: TRIGGER(picked==TRUE)"
"Statement 1: TRIGGER(pathSensor==TRUE)"->"Statement 2: cycles:=cycles+1;"
"Statement 1: TRIGGER(pathSensor==TRUE)"->"Statement 3: IF(cycles%2==1)"
"Statement 3: IF(cycles%2==1)"->"Statement 4: PATHSET<<'path1';"
"Statement 3: IF(cycles%2==1)"->"Statement 5: ELSIF(cycles%2==0)"
"Statement 5: ELSIF(cycles%2==0)"->"Statement 6: PATHSET<<'path2';"
"Statement 7: TRIGGER(sensor1==TRUE)"->"Statement 8: info1<<SREAD1;"
"Statement 7: TRIGGER(sensor1==TRUE)"->"Statement 9: mark1:=checkProduct(info1);"
"Statement 7: TRIGGER(sensor1==TRUE)"->"Statement 10: mark1>>SWRITE1;"
"Statement 11: TRIGGER(sensor2==TRUE)"->"Statement 12: info2<<SREAD2;"
"Statement 11: TRIGGER(sensor2==TRUE)"->"Statement 13: mark2:=checkProduct(info2);"
"Statement 11: TRIGGER(sensor2==TRUE)"->"Statement 14: mark2>>SWRITE2;"
"Statement 15: TRIGGER(sortSensor==TRUE)"->"Statement 16: mark<<SCANNER;"
"Statement 15: TRIGGER(sortSensor==TRUE)"->"Statement 17: IF(mark==TRUE)"
"Statement 15: TRIGGER(sortSensor==TRUE)"->"Statement 23: picked:=TRUE;"
"Statement 17: IF(mark==TRUE)"->"Statement 18: SORTSET<<'Quality';"
"Statement 17: IF(mark==TRUE)"->"Statement 19: countQuality:=countQuality+1;"
"Statement 17: IF(mark==TRUE)"->"Statement 20: ELSE"
"Statement 20: ELSE"->"Statement 21: SORTSET<<'UnQuality';"
"Statement 20: ELSE"->"Statement 22: countUnQuality:=countUnQuality+1;"
"Statement 24: TRIGGER(picked==TRUE)"->"Statement 25: IF(countUnQuality/countQuality>0.01)"
"Statement 24: TRIGGER(picked==TRUE)"->"Statement 27: picked:=FALSE;"
"Statement 25: IF(countUnQuality/countQuality>0.01)"->"Statement 26: STOP;"
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 2: cycles:=cycles+1;"[style=dotted]
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 19: countQuality:=countQuality+1;"[style=dotted]
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 22: countUnQuality:=countUnQuality+1;"[style=dotted]
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 24: TRIGGER(picked==TRUE)"[style=dotted]
"Statement 0: sorting(PARAM:cycles,countQuality,countUnQuality)"->"Statement 25: IF(countUnQuality/countQuality>0.01)"[style=dotted]
"Statement 2: cycles:=cycles+1;"->"Statement 2: cycles:=cycles+1;"[style=dotted]
"Statement 2: cycles:=cycles+1;"->"Statement 3: IF(cycles%2==1)"[style=dotted]
"Statement 2: cycles:=cycles+1;"->"Statement 5: ELSIF(cycles%2==0)"[style=dotted]
"Statement 8: info1<<SREAD1;"->"Statement 9: mark1:=checkProduct(info1);"[style=dotted]
"Statement 9: mark1:=checkProduct(info1);"->"Statement 10: mark1>>SWRITE1;"[style=dotted]
"Statement 12: info2<<SREAD2;"->"Statement 13: mark2:=checkProduct(info2);"[style=dotted]
"Statement 13: mark2:=checkProduct(info2);"->"Statement 14: mark2>>SWRITE2;"[style=dotted]
"Statement 16: mark<<SCANNER;"->"Statement 17: IF(mark==TRUE)"[style=dotted]
"Statement 16: mark<<SCANNER;"->"Statement 20: ELSE"[style=dotted]
"Statement 19: countQuality:=countQuality+1;"->"Statement 19: countQuality:=countQuality+1;"[style=dotted]
"Statement 19: countQuality:=countQuality+1;"->"Statement 25: IF(countUnQuality/countQuality>0.01)"[style=dotted]
"Statement 22: countUnQuality:=countUnQuality+1;"->"Statement 22: countUnQuality:=countUnQuality+1;"[style=dotted]
"Statement 22: countUnQuality:=countUnQuality+1;"->"Statement 25: IF(countUnQuality/countQuality>0.01)"[style=dotted]
}